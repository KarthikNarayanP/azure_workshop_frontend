resources:
 repositories:
 - repository: FrontendRepo
   endpoint: AZUREMYSERVICECONNECTION
   type: git
   name: azure_workshop_frontend
 - repository: BackendRepo
   endpoint: AZUREMYSERVICECONNECTION
   type: git
   name: azure_workshop_backend
stages:
- stage: PREBUILD_QA_FRONTEND
  displayName: PREBUILD QA FRONTEND
  jobs:
  - job: PREBUILD_QA
    displayName: STATIC CODE ANALYSIS, UNITTEST & CODE COVERAGE
    continueOnError: false
    pool:
        vmImage: 'ubuntu-latest'
    variables:
        privateIP: $(publicIP)
        region: $(regionprimary)
        bucket: $(bucketurl)
        username: $(userkey)
        password: $(secretkey)
        tenant: $(tenantkey)
    steps:
      - checkout: FrontendRepo
        persistCredentials: true
      - bash: |
          echo "Environmental Valued"
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
      - script: |
          echo "Environmental Value $(backendPublicIP)"
          npm install --production
        displayName: 'Install Dependencies'
        
      - script: |
          export backendIP=$(sonarIP)
          npm run scan
        displayName: 'Static Code Analysis'

      - script: |
          export backendIP=$(sonarIP)
          npm test
        displayName: 'Unit Test'
        continueOnError: false
      - script: |
          export backendIP=$(sonarIP)
          npm run scan
        displayName: 'Code Coverage'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: 'test/results/junit.xml'
          buildConfiguration: 
      - task: PublishCodeCoverageResults@1
        inputs: 
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/test/results/coverage/clover.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/test/results/coverage'
          
- stage: BUILD_AND_PUSH_FRONTEND
  displayName: BUILD AND PUSH TO ACR
  dependsOn: PREBUILD_QA_FRONTEND
  jobs:
  - job: BUILD_PUSH
    displayName: BUILD AND PUSH TO ACR
    pool:
        vmImage: 'ubuntu-latest'
    steps:
      - checkout: FrontendRepo
      - script: |
          docker build -t digitalshopify:latest .
        displayName: 'Build Docker Image'
      - script: |
          docker login $(acrRegistry) --username 00000000-0000-0000-0000-000000000000 --password $(azureACRToken)
          docker tag digitalshopify $(acrRegistry)/digitalshopify
          docker push $(acrRegistry)/digitalshopify
        displayName: 'Push Docker Image to ACR'

- stage: DEPLOY_WITH_VIRTUAL_SERVICES_TO_AKS
  displayName: DEPLOY WITH VIRTUAL SERVICES TO AKS
  dependsOn: BUILD_AND_PUSH_FRONTEND
  jobs:
   - job: DEPLOY_WITH_VIRTUAL_SERVICES_TO_AKS
     displayName: DEPLOY WITH VIRTUAL SERVICES TO AKS
     pool:
        vmImage: 'ubuntu-latest'
     steps:
      - checkout: none
      - task: Kubernetes@1
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: MYAKSCONNECTION
          command: login
        displayName: 'Login to AKS'
      - task: Bash@3
        displayName: 'Deployment'        
        inputs:
          targetType: 'inline'
          script: |
            ( kubectl create secret docker-registry mykubetokenacr --docker-server=$(acrRegistry) --docker-username=00000000-0000-0000-0000-000000000000 --docker-password=$(azureACRToken) ) 2>/dev/null || true
            ( kubectl delete service/frontend service/frontend-pod-loadbalancer service/backend-pod-loadbalancer ) 2>/dev/null || true
            ( kubectl delete pod/backend pod/frontend ) 2>/dev/null || true
            kubectl run backend --image=$(acrRegistry)/digitalshopify --overrides='{ "apiVersion": "v1", "spec": { "imagePullSecrets": [{"name": "mykubetokenacr"}] } }' --port=8180
            kubectl expose pod backend --port=8180 --target-port=8180 --name=backend-pod-loadbalancer --type=LoadBalancer
            bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc backend-pod-loadbalancer --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip'
            externalip=$(kubectl get services/backend-pod-loadbalancer -o json | jq '.status.loadBalancer.ingress[0].ip' | tr -d '"')
            echo $externalip
            kubectl run frontend --image=$(acrRegistry)/digitalshopify --overrides='{ "apiVersion": "v1", "spec": { "imagePullSecrets": [{"name": "mykubetokenacr"}] } }' --port=3000 --expose=true --env="REACT_APP_API=$externalip" -- npm start
            kubectl expose pod frontend --port=3000 --target-port=3000 --name=frontend-pod-loadbalancer --type=LoadBalancer
            bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc frontend-pod-loadbalancer --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip'
            externalipfront=$(kubectl get services/frontend-pod-loadbalancer -o json | jq '.status.loadBalancer.ingress[0].ip' | tr -d '"')
            wigetEtag=$(curl -X GET -s --connect-timeout 8 -H 'Content-Type:application/json' -H 'Authorization: Basic $(b64pat)' https://dev.azure.com/$(organization)/$(project)/$(project)%20Team/_apis/dashboard/dashboards/$(dashboardLabOverviewID)/widgets/$(prebuildWidgetID)?api-version=6.0-preview.2 | jq '.eTag' | tr -d '"')
            curl -X PATCH -s --connect-timeout 8 -d "{\"eTag\":\"$wigetEtag\",\"name\":\"Markdown\",\"position\":{\"row\":1,\"column\":3},\"size\":{\"rowSpan\":1,\"columnSpan\":2},\"settings\":\"----\n### Deployment in PreBuild\nApplication deployed in PreBuild can be viewed here\n\n----\n###### Application deployed with Virtual \/ Mock Services\n> - [Digitalshopify](http://$externalipfront:3000)\",\"settingsVersion\":{\"major\":1,\"minor\":0,\"patch\":0},\"dashboard\":{\"eTag\":\"$(dashboardLabOverviewETAG)\"},\"contributionId\":\"ms.vss-dashboards-web.Microsoft.VisualStudioOnline.Dashboards.MarkdownWidget\",\"lightboxOptions\":{\"width\":600,\"height\":500,\"resizable\":true}}" -H 'Content-Type:application/json' -H 'Authorization: Basic $(b64pat)' https://dev.azure.com/$(organization)/$(project)/$(project)%20Team/_apis/dashboard/dashboards/$(dashboardLabOverviewID)/widgets/$(prebuildWidgetID)?api-version=6.0-preview.2
- stage: BVT_SYSTEM_TESTS
  displayName: BUILD VERIFICATION TESTS
  dependsOn: DEPLOY_WITH_VIRTUAL_SERVICES_TO_AKS
  jobs:
  - job: BVT_SYSTEM_TESTS
    displayName: BVT - UI TESTS
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        echo "Environmental Valued"
      env:
        backendIP: $(backendPublicIP)
        publicIP: $(backendPublicIP)
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
    - script: |
        echo "Environmental Value $(backendPublicIP)"
        npm install
      displayName: 'Install Dependencies'
    - task: Kubernetes@1
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: MYAKSCONNECTION
        command: login
      displayName: 'Login to AKS'
    - task: Bash@3
      displayName: 'UI System Tests'        
      inputs:
        targetType: 'inline'
        script: |
          bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc frontend-pod-loadbalancer --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip'
          externalip=$(kubectl get services/frontend-pod-loadbalancer -o json | jq '.status.loadBalancer.ingress[0].ip' | tr -d '"')
          npm run bvt -- --url=http://$externalip:3000
    - script: |
        az storage blob upload-batch --destination '$web' --account-name "$(blobAccount)" --source "test/results/latestresult" --sas-token "$(sasTokenBlob)" --connection-string "$(connectionStringBlob)"
      displayName: 'Publish Reports To Blob'
      condition: always()
- stage: PREBUILD_QA_BACKEND
  displayName: PREBUILD QA BACKEND
  dependsOn: []
  jobs:
    - job: PREBUILD_QA
      displayName: STATIC CODE ANALYSIS, UNITTEST & CODE COVERAGE
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        backendIP: $(publicIP)
      steps:
      - checkout: BackendRepo
        persistCredentials: true
      - script: |
          export backendIP=$(sonarIP)
          export INSTRUMENTATION_KEY=$(INSTRUMENTATION_KEY)
          chmod +x gradlew
          ./gradlew clean sonarqube
          curl -s --connect-timeout 8 -d "{\"moduleName\":\"codecoverage_static_api\",\"status\":\"Completed\"}"   -H 'Content-Type:application/json' http://$backendIP:3337/api/v1/azure_dashboard_report/moudule/update || true
        displayName: 'Static Code Analysis'
      - script: |
          export backendIP=$(sonarIP)
          export INSTRUMENTATION_KEY=$(INSTRUMENTATION_KEY)
          chmod +x gradlew
          ./gradlew clean codeCoverageReport sonarqube
        displayName: 'Unit Test'
      - task: PublishTestResults@1
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/TEST-*.xml'
          mergeTestResults: true
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs: 
            codeCoverageTool: JaCoCo
            summaryFileLocation: 'build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml'
            reportDirectory: 'build/reports/jacoco/codeCoverageReport/html'
            
- stage: BUILD_AND_PUSH_BACKEND
  displayName: BUILD AND PUSH TO ACR
  dependsOn: PREBUILD_QA_BACKEND
  jobs:
    - job: BUILD
      displayName: BUILD AND PUSH TO ACR
      pool:
          vmImage: 'ubuntu-latest'
      steps:
        - checkout: BackendRepo
        - script: |
            export INSTRUMENTATION_KEY=$(INSTRUMENTATION_KEY)
            chmod +x ./gradlew
            ./gradlew clean build
            docker-compose build
          displayName: 'Build Docker Image'
        - script: |
            docker login $(acrRegistry) --username 00000000-0000-0000-0000-000000000000 --password $(azureACRToken)
            docker tag ctsshop/service-registry-1.0.jar:v1.0 $(acrRegistry)/ctsshop/service-registry-1.0.jar:v1.0
            docker push $(acrRegistry)/ctsshop/service-registry-1.0.jar:v1.0
          displayName: 'Push SERVICE-REGISTRY Docker Image to ACR'
        - script: |
            docker tag ctsshop/catalogue-service-1.0.jar:v1.0 $(acrRegistry)/ctsshop/catalogue-service-1.0.jar:v1.0
            docker push $(acrRegistry)/ctsshop/catalogue-service-1.0.jar:v1.0
          displayName: 'Push CATALOGUE-SERVICE Docker Image to ACR'
        - script: |
            docker tag ctsshop/customer-service-1.0.jar:v1.0 $(acrRegistry)/ctsshop/customer-service-1.0.jar:v1.0
            docker push $(acrRegistry)/ctsshop/customer-service-1.0.jar:v1.0
          displayName: 'Push CUSTOMER-SERVICE Docker Image to ACR'
        - script: |
            docker tag ctsshop/image-service-1.0.jar:v1.0 $(acrRegistry)/ctsshop/image-service-1.0.jar:v1.0
            docker push $(acrRegistry)/ctsshop/image-service-1.0.jar:v1.0
          displayName: 'Push IMAGE-SERVICE Docker Image to ACR'
        - script: |
            docker tag ctsshop/payment-service-1.0.jar:v1.0 $(acrRegistry)/ctsshop/payment-service-1.0.jar:v1.0
            docker push $(acrRegistry)/ctsshop/payment-service-1.0.jar:v1.0
          displayName: 'Push PAYMENT-SERVICE Docker Image to ACR'
        - script: |
            #rev=`echo $(Build.BuildNumber) | cut -d "." -f 2`
            body="[{\"op\":\"test\",\"path\":\"\/rev\",\"value\":1},{\"op\":\"add\",\"path\":\"\/fields\/System.State\",\"value\":\"Done\"}]"
            IFS=',' read -ra devIDs <<< "$(devIDs)"
            for devID in "${devIDs[@]}"; do
              if [[ $(az rest --method get --headers Authorization="Basic "$(b64pat) --url https://dev.azure.com/$(organization)/$(project)/_apis/wit/workitems/$devID?api-version=6.0 | jq '.fields."System.State"' | tr -d '"') = "To Do" ]];then
                url="https://dev.azure.com/$(organization)/$(project)/_apis/wit/workitems/$devID?api-version=6.0"
                az rest --method patch --headers Authorization="Basic "$(b64pat) Content-Type=application/json-patch+json --url $url --body $body
              fi  
            done
            IFS=',' read -ra devOpsIDs <<< "$(devOpsIDs)"
            for devOpsID in "${devOpsIDs[@]}"; do
              if [[ $(az rest --method get --headers Authorization="Basic "$(b64pat) --url https://dev.azure.com/$(organization)/$(project)/_apis/wit/workitems/$devOpsID?api-version=6.0 | jq '.fields."System.State"' | tr -d '"') = "To Do" ]];then
                url="https://dev.azure.com/$(organization)/$(project)/_apis/wit/workitems/$devOpsID?api-version=6.0"
                az rest --method patch --headers Authorization="Basic "$(b64pat) Content-Type=application/json-patch+json --url $url --body $body
              fi  
            done
          displayName: 'Update WorkItems'